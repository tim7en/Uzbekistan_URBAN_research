"""Reporting functions: generate reports and error tables."""
import json
from pathlib import Path
from datetime import datetime
import numpy as np
import pandas as pd


def generate_comprehensive_report(all_results, output_dir: Path) -> None:
    report_file = output_dir / "COMPREHENSIVE_SUHI_ANALYSIS_REPORT.md"
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write("# COMPREHENSIVE SUHI ANALYSIS REPORT\n")
        f.write("="*50 + "\n\n")
        f.write(f"**Analysis Date:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"**Cities Analyzed:** {len(set(r['city'] for r in all_results))}\n")
        f.write(f"**Total Analyses:** {len(all_results)}\n\n")
        f.write("## ANALYSIS SUMMARY\n\n")
        city_groups = {}
        for result in all_results:
            city = result['city']
            city_groups.setdefault(city, []).append(result)
        for city, city_results in city_groups.items():
            f.write(f"### {city}\n\n")
            suhi_values = []
            day_night_ratios = []
            landcover_changes = []
            for result in city_results:
                if 'suhi_analysis' in result and 'suhi' in result['suhi_analysis']:
                    suhi_values.append(result['suhi_analysis']['suhi'])
                if 'day_night_analysis' in result and 'day_night_difference' in result['day_night_analysis']:
                    diff_data = result['day_night_analysis']['day_night_difference']
                    if 'magnitude_ratio' in diff_data:
                        day_night_ratios.append(diff_data['magnitude_ratio'])
                if 'landcover_changes' in result and 'landcover_changes' in result['landcover_changes']:
                    changes = result['landcover_changes']['landcover_changes']
                    if 'Built_Area' in changes:
                        built_change = changes['Built_Area'].get('change_km2', 0)
                        landcover_changes.append(built_change)
            if suhi_values:
                f.write(f"- **Average SUHI:** {np.mean(suhi_values):.2f} C (Â±{np.std(suhi_values):.2f})\n")
                f.write(f"- **SUHI Range:** {min(suhi_values):.2f} - {max(suhi_values):.2f} C\n")
            if day_night_ratios:
                valid_ratios = [r for r in day_night_ratios if not np.isinf(r)]
                if valid_ratios:
                    f.write(f"- **Day/Night SUHI Ratio:** {np.mean(valid_ratios):.2f} (Â±{np.std(valid_ratios):.2f})\n")
            if landcover_changes:
                total_change = sum(landcover_changes)
                f.write(f"- **Built Area Change:** {total_change:.2f} kmÂ² over analysis period\n")
            f.write(f"- **Years Analyzed:** {len(city_results)}\n")
            f.write(f"- **Processing Scale:** {city_results[0].get('processing_scale', 'Unknown')}m\n\n")
        f.write("## DETAILED RESULTS\n\n")
        for result in all_results:
            f.write(f"### {result['city']} - {result['year']}\n\n")
            if 'suhi_analysis' in result:
                suhi_data = result['suhi_analysis']
                if 'error' not in suhi_data:
                    f.write(f"**SUHI Intensity:** {suhi_data.get('suhi', 'N/A'):.2f} Â°C\n")
                    f.write(f"**Confidence Interval:** [{suhi_data.get('ci_95_lower', 'N/A'):.2f}, {suhi_data.get('ci_95_upper', 'N/A'):.2f}] Â°C\n")
                    f.write(f"**Relative Error:** {suhi_data.get('relative_error_pct', 'N/A'):.1f}%\n")
                else:
                    f.write(f"**SUHI Analysis:** Error - {suhi_data.get('error', 'Unknown error')}\n")
            if 'day_night_analysis' in result:
                day_night = result['day_night_analysis']
                if 'error' not in day_night and 'day' in day_night and 'night' in day_night:
                    day_suhi = day_night['day'].get('suhi', 0)
                    night_suhi = day_night['night'].get('suhi', 0)
                    f.write(f"**Day SUHI:** {day_suhi:.2f} Â°C\n")
                    f.write(f"**Night SUHI:** {night_suhi:.2f} Â°C\n")
                    if 'day_night_difference' in day_night:
                        diff = day_night['day_night_difference']
                        f.write(f"**Day-Night Difference:** {diff.get('suhi_difference', 0):.2f} Â°C\n")
            if 'landcover_changes' in result and 'landcover_changes' in result['landcover_changes']:
                # baseline_year not defined in module; skip detailed baseline comparison
                pass
            f.write('\n')
        f.write('\n---\n')
        f.write('*Report generated by Enhanced SUHI Analysis System*\n')
    print(f"ðŸ“„ Comprehensive report saved: {report_file}")


def generate_error_report(results, output_dir: Path) -> None:
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    report_path = output_dir / f'error_report_{timestamp}.md'
    with open(report_path, 'w') as f:
        f.write("# SUHI Analysis Error Report\n\n")
        f.write(f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
        f.write("## Summary Statistics\n\n")
        f.write("| City | Year | SUHI (Â°C) | SE | 95% CI | Rel. Error (%) | Urban Pixels | Rural Pixels |\n")
        f.write("|------|------|-----------|----|---------|--------------:|-------------:|-------------:|\n")
        for result in results:
            if 'suhi_analysis' in result and 'suhi' in result['suhi_analysis']:
                suhi = result['suhi_analysis']
                f.write(f"| {result['city']} | {result['year']} | {suhi['suhi']:.2f} | {suhi['suhi_se']:.3f} | [{suhi['ci_95_lower']:.2f}, {suhi['ci_95_upper']:.2f}] | {suhi['relative_error_pct']:.1f} | {suhi['urban_pixels']} | {suhi['rural_pixels']} |\n")
        f.write('\n## Classification Accuracy\n\n')
        for result in results:
            if 'accuracy_assessment' in result:
                f.write(f"### {result['city']} ({result['year']})\n")
                f.write(f"Classifications available: {', '.join(result['classifications_available'])}\n")
                f.write("```json\n")
                f.write(json.dumps(result['accuracy_assessment'], indent=2))
                f.write("\n```\n\n")
    print(f"ðŸ“Š Error report saved to: {report_path}")


def generate_landcover_change_table(city_changes, output_dir: Path) -> None:
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    summary = []
    for city, matrix in city_changes.items():
        if hasattr(matrix, 'attrs'):
            built_gain_values = []
            for cls in matrix.index:
                if (cls != 'Built_Area' and cls != 'total_to' and 'Built_Area' in matrix.columns):
                    try:
                        val = matrix.loc[cls, 'Built_Area']
                        val_numeric = pd.to_numeric(val, errors='coerce')
                        if pd.notna(val_numeric):
                            built_gain_values.append(val_numeric)
                    except:
                        continue
            total_built_gain = sum(built_gain_values) if built_gain_values else 0.0
            summary.append({'City': matrix.attrs['city'], 'Period': f"{matrix.attrs['start_year']}-{matrix.attrs['end_year']}", 'Accuracy (%)': f"{matrix.attrs['accuracy_pct']:.1f}", 'Error (%)': f"{matrix.attrs['error_pct']:.1f}", 'Cropsâ†’Built': matrix.loc['Crops', 'Built_Area'] if 'Crops' in matrix.index else 0, 'Bareâ†’Built': matrix.loc['Bare_Ground', 'Built_Area'] if 'Bare_Ground' in matrix.index else 0, 'Total Built Gain': total_built_gain})
    summary_df = pd.DataFrame(summary)
    csv_path = output_dir / f'landcover_changes_summary_{timestamp}.csv'
    summary_df.to_csv(csv_path, index=False)
    excel_path = output_dir / f'landcover_changes_detailed_{timestamp}.xlsx'
    with pd.ExcelWriter(excel_path) as writer:
        summary_df.to_excel(writer, sheet_name='Summary', index=False)
        for city, matrix in city_changes.items():
            sheet_name = city[:31] if len(city) > 31 else city
            matrix.to_excel(writer, sheet_name=sheet_name)
    print(f"ðŸ“Š Land cover change tables saved: {csv_path} and {excel_path}")
