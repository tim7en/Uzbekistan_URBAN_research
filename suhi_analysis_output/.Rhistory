# ==============================
# 1) Relative change (%) bar chart (2016 → 2024)
# ==============================
p_rel <- ggplot(paired, aes(x = city_f, y = rel_change_pct)) +
geom_col() +
geom_hline(yintercept = 0, linetype = "dashed") +
coord_flip() +
scale_y_continuous(labels = function(x) paste0(x, "%")) +
labs(
title = "Relative SUHI change (2016 → 2024)",
subtitle = "Percent change vs 2016 baseline",
x = "City",
y = "Change (%)"
) +
theme_minimal(base_size = 12)
ggsave(file.path(out_dir, "01_relative_change_bar_2016_to_2024.png"),
p_rel, width = 10, height = 7, dpi = 300)
# ==============================
# 2a) Boxplot: SUHI distributions for 2016 vs 2024 (each point = city)
# ==============================
set.seed(42)
p_box_years <- ggplot(df_2yrs, aes(x = factor(year), y = suhi)) +
geom_boxplot(outlier.shape = NA, width = 0.5) +
geom_jitter(width = 0.12, height = 0, alpha = 0.65) +
labs(
title = "SUHI distributions across cities",
subtitle = "Side-by-side for 2016 and 2024",
x = "Year",
y = "SUHI"
) +
theme_minimal(base_size = 12)
ggsave(file.path(out_dir, "02a_boxplot_suhi_2016_vs_2024.png"),
p_box_years, width = 8, height = 6, dpi = 300)
# ==============================
# 2b) Boxplot: per-city differences (2024 − 2016)
# ==============================
p_box_diff <- ggplot(paired, aes(x = "Δ SUHI", y = abs_change)) +
geom_boxplot(width = 0.4) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_jitter(width = 0.08, height = 0, alpha = 0.6) +
labs(
title = "Per-city SUHI change",
subtitle = "Distribution of differences (2024 − 2016)",
x = "",
y = "Change in SUHI"
) +
theme_minimal(base_size = 12)
ggsave(file.path(out_dir, "02b_boxplot_suhi_difference_2024_minus_2016.png"),
p_box_diff, width = 7, height = 6, dpi = 300)
# ==============================
# 3) Colored bar chart: absolute SUHI change by city (2024 − 2016)
# ==============================
paired_change_order <- paired %>% arrange(abs_change) %>%
mutate(city_f = factor(city, levels = city))
p_change <- ggplot(paired_change_order,
aes(x = city_f, y = abs_change, fill = change_sign)) +
geom_col() +
geom_hline(yintercept = 0, linetype = "dashed") +
coord_flip() +
labs(
title = "SUHI change across cities (2024 − 2016)",
x = "City",
y = "Change in SUHI",
fill = "Direction"
) +
theme_minimal(base_size = 12)
ggsave(file.path(out_dir, "03_colored_bar_suhi_change_by_city.png"),
p_change, width = 10, height = 7, dpi = 300)
# ==============================
# Optional: quick summary to console
# ==============================
paired %>%
arrange(desc(abs_change)) %>%
select(city, Y2016, Y2024, abs_change, rel_change_pct) %>%
mutate(rel_change_pct = sprintf("%.1f%%", rel_change_pct)) %>%
print(n = Inf)
message("Saved the first three figures to: ", normalizePath(out_dir))
# ==============================
# Dashboard-style SUHI change chart (choose any two years)
# ==============================
baseline_year <- 2017   # <- change to 2016 if you want 2016 vs 2024
compare_year  <- 2024
wide_dash <- df_agg %>%
filter(year %in% c(baseline_year, compare_year)) %>%
select(city, year, suhi) %>%
pivot_wider(names_from = year, values_from = suhi)
paired_dash <- wide_dash %>%
filter(!is.na(.data[[as.character(baseline_year)]]) &
!is.na(.data[[as.character(compare_year)]])) %>%
transmute(
city,
change = .data[[as.character(compare_year)]] - .data[[as.character(baseline_year)]],
sign   = case_when(
change >  0 ~ "Increase",
change <  0 ~ "Decrease",
TRUE        ~ "No change"
),
label = sprintf("%+0.3f", change)
) %>%
arrange(change) %>%
mutate(city_f = factor(city, levels = city))
stopifnot(nrow(paired_dash) > 0)
cols <- c("Increase" = "#F76C6C", "Decrease" = "#2ECC71", "No change" = "#95A5A6")
pad  <- max(abs(paired_dash$change), na.rm = TRUE) * 0.12
paired_dash <- paired_dash %>%
mutate(ypos = ifelse(change >= 0, change + pad*0.15, change - pad*0.15))
p_dashboard <- ggplot(paired_dash, aes(x = city_f, y = change, fill = sign)) +
geom_col(width = 0.7) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_text(aes(y = ypos, label = label), size = 3.5) +
scale_fill_manual(values = cols, guide = "none") +
scale_y_continuous(expand = expansion(mult = c(0.05, 0.15))) +
labs(
title = sprintf("Dashboard Chart 2: SUHI Change Distribution (%d - %d)",
compare_year, baseline_year),
x = "Cities",
y = "SUHI Change (°C)"
) +
theme_minimal(base_size = 12) +
theme(axis.text.x = element_text(angle = 30, hjust = 1))
out_file <- sprintf("plots/dashboard_suhi_change_%d_minus_%d.png", compare_year, baseline_year)
ggsave(out_file, p_dashboard, width = 10, height = 6, dpi = 300)
message("Saved dashboard figure: ", normalizePath(out_file))
# ==============================
# SUHI charts: 2016 vs 2024 (+ dashboard-style chart)
# ==============================
# ---- Packages ----
pkgs <- c("readr","dplyr","tidyr","ggplot2","forcats","stringr","scales")
to_install <- setdiff(pkgs, rownames(installed.packages()))
if (length(to_install)) install.packages(to_install, dep = TRUE)
invisible(lapply(pkgs, library, character.only = TRUE))
# ---- Input ----
# CSV should have at least: city, year, and either suhi OR (urban_mean & rural_mean)
data_path <- "out/suhi_batch_summary_flat.csv"   # <- change if needed
# ---- Read ----
df_raw <- readr::read_csv(data_path, show_col_types = FALSE)
# ---- Helpers ----
clean_city <- function(x) {
x %>%
as.character() %>%
stringr::str_replace_all("\\u00A0", " ") %>%  # non-breaking space
stringr::str_squish() %>%
stringr::str_trim()
}
# ---- Hygiene & fallbacks ----
df <- df_raw %>%
mutate(
city = clean_city(city),
year = as.integer(year),
# Robust numeric conversion (will coerce char->numeric and keep numeric as is)
across(any_of(c("urban_mean","rural_mean","suhi")), ~ suppressWarnings(as.numeric(.)))
)
# If "suhi" absent but we have urban_mean and rural_mean, derive it
if (!"suhi" %in% names(df) && all(c("urban_mean","rural_mean") %in% names(df))) {
df <- df %>% mutate(suhi = urban_mean - rural_mean)
}
# Keep only what we need going forward
stopifnot(all(c("city","year","suhi") %in% names(df)))
# Average duplicates per (city, year) to prevent double-bars / label drift
df_agg <- df %>%
group_by(city, year) %>%
summarise(suhi = mean(suhi, na.rm = TRUE), .groups = "drop")
# ==============================
# Focus on 2016 & 2024
# ==============================
df_2yrs <- df_agg %>%
filter(year %in% c(2016, 2024))
# Build paired wide table (one row per city that has both years)
paired <- df_2yrs %>%
select(city, year, suhi) %>%
pivot_wider(names_from = year, values_from = suhi, names_prefix = "Y") %>%
filter(!is.na(Y2016) & !is.na(Y2024)) %>%
mutate(
abs_change = Y2024 - Y2016,                                   # 2024 - 2016
rel_change_pct = ifelse(abs(Y2016) < 1e-9, NA_real_,
(Y2024 - Y2016) / abs(Y2016) * 100),   # % vs 2016 (safe)
change_sign = case_when(
abs_change >  0 ~ "Increase",
abs_change <  0 ~ "Decrease",
TRUE            ~ "No change"
)
) %>%
arrange(rel_change_pct)
if (nrow(paired) == 0) stop("No cities have both 2016 and 2024 SUHI values.")
# Freeze factor order once to keep labels aligned with bars
paired <- paired %>%
mutate(city_f = factor(city, levels = city))
# ---- Output folder ----
out_dir <- "plots"
if (!dir.exists(out_dir)) dir.create(out_dir)
# ==============================
# 1) Relative change (%) bar chart (2016 → 2024)
# ==============================
p_rel <- ggplot(paired, aes(x = city_f, y = rel_change_pct)) +
geom_col() +
geom_hline(yintercept = 0, linetype = "dashed") +
coord_flip() +
scale_y_continuous(labels = function(x) paste0(x, "%")) +
labs(
title = "Relative SUHI change (2016 → 2024)",
subtitle = "Percent change vs 2016 baseline",
x = "City",
y = "Change (%)"
) +
theme_minimal(base_size = 12)
ggsave(file.path(out_dir, "01_relative_change_bar_2016_to_2024.png"),
p_rel, width = 10, height = 7, dpi = 300)
# ==============================
# 2a) Boxplot: SUHI distributions for 2016 vs 2024 (each point = city)
# ==============================
set.seed(42)
p_box_years <- ggplot(df_2yrs, aes(x = factor(year), y = suhi)) +
geom_boxplot(outlier.shape = NA, width = 0.5) +
geom_jitter(width = 0.12, height = 0, alpha = 0.65) +
labs(
title = "SUHI distributions across cities",
subtitle = "Side-by-side for 2016 and 2024",
x = "Year",
y = "SUHI"
) +
theme_minimal(base_size = 12)
ggsave(file.path(out_dir, "02a_boxplot_suhi_2016_vs_2024.png"),
p_box_years, width = 8, height = 6, dpi = 300)
# ==============================
# 2b) Boxplot: per-city differences (2024 − 2016)
# ==============================
p_box_diff <- ggplot(paired, aes(x = "Δ SUHI", y = abs_change)) +
geom_boxplot(width = 0.4) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_jitter(width = 0.08, height = 0, alpha = 0.6) +
labs(
title = "Per-city SUHI change",
subtitle = "Distribution of differences (2024 − 2016)",
x = "",
y = "Change in SUHI"
) +
theme_minimal(base_size = 12)
ggsave(file.path(out_dir, "02b_boxplot_suhi_difference_2024_minus_2016.png"),
p_box_diff, width = 7, height = 6, dpi = 300)
# ==============================
# 3) Colored bar chart: absolute SUHI change by city (2024 − 2016)
# ==============================
paired_change_order <- paired %>% arrange(abs_change) %>%
mutate(city_f = factor(city, levels = city))
p_change <- ggplot(paired_change_order,
aes(x = city_f, y = abs_change, fill = change_sign)) +
geom_col() +
geom_hline(yintercept = 0, linetype = "dashed") +
coord_flip() +
labs(
title = "SUHI change across cities (2024 − 2016)",
x = "City",
y = "Change in SUHI",
fill = "Direction"
) +
theme_minimal(base_size = 12)
ggsave(file.path(out_dir, "03_colored_bar_suhi_change_by_city.png"),
p_change, width = 10, height = 7, dpi = 300)
# ==============================
# Optional: quick summary to console
# ==============================
paired %>%
arrange(desc(abs_change)) %>%
select(city, Y2016, Y2024, abs_change, rel_change_pct) %>%
mutate(rel_change_pct = sprintf("%.1f%%", rel_change_pct)) %>%
print(n = Inf)
message("Saved the first three figures to: ", normalizePath(out_dir))
# ==============================
# Dashboard-style SUHI change chart (choose any two years)
# ==============================
baseline_year <- 2016   # <- change to 2016 if you want 2016 vs 2024
compare_year  <- 2024
wide_dash <- df_agg %>%
filter(year %in% c(baseline_year, compare_year)) %>%
select(city, year, suhi) %>%
pivot_wider(names_from = year, values_from = suhi)
paired_dash <- wide_dash %>%
filter(!is.na(.data[[as.character(baseline_year)]]) &
!is.na(.data[[as.character(compare_year)]])) %>%
transmute(
city,
change = .data[[as.character(compare_year)]] - .data[[as.character(baseline_year)]],
sign   = case_when(
change >  0 ~ "Increase",
change <  0 ~ "Decrease",
TRUE        ~ "No change"
),
label = sprintf("%+0.3f", change)
) %>%
arrange(change) %>%
mutate(city_f = factor(city, levels = city))
stopifnot(nrow(paired_dash) > 0)
cols <- c("Increase" = "#F76C6C", "Decrease" = "#2ECC71", "No change" = "#95A5A6")
pad  <- max(abs(paired_dash$change), na.rm = TRUE) * 0.12
paired_dash <- paired_dash %>%
mutate(ypos = ifelse(change >= 0, change + pad*0.15, change - pad*0.15))
p_dashboard <- ggplot(paired_dash, aes(x = city_f, y = change, fill = sign)) +
geom_col(width = 0.7) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_text(aes(y = ypos, label = label), size = 3.5) +
scale_fill_manual(values = cols, guide = "none") +
scale_y_continuous(expand = expansion(mult = c(0.05, 0.15))) +
labs(
title = sprintf("Dashboard Chart 2: SUHI Change Distribution (%d - %d)",
compare_year, baseline_year),
x = "Cities",
y = "SUHI Change (°C)"
) +
theme_minimal(base_size = 12) +
theme(axis.text.x = element_text(angle = 30, hjust = 1))
out_file <- sprintf("plots/dashboard_suhi_change_%d_minus_%d.png", compare_year, baseline_year)
ggsave(out_file, p_dashboard, width = 10, height = 6, dpi = 300)
message("Saved dashboard figure: ", normalizePath(out_file))
# ==============================
# Relative Error Analysis plot (dashboard style)
# ==============================
library(dplyr)
library(tidyr)
library(ggplot2)
library(forcats)
library(stringr)
library(scales)
# ---- Choose the two years to compare ----
years_for_re <- c(2016, 2024)
# ---- Clean city names & numeric columns ----
clean_city <- function(x) {
x %>%
as.character() %>%
str_replace_all("\\u00A0", " ") %>%  # non-breaking space
str_squish() %>%
str_trim()
}
df <- df %>%
mutate(city = clean_city(city),
year = as.integer(year))
# ---- Pick urban/rural SD columns (supports either urban_std/rural_std or urban_stdc/rural_stdc) ----
u_sd_name <- intersect(c("urban_std","urban_stdc"), names(df))
r_sd_name <- intersect(c("rural_std","rural_stdc"), names(df))
df <- df %>%
mutate(
u_sd = if (length(u_sd_name)) suppressWarnings(as.numeric(.data[[u_sd_name[1]]])) else NA_real_,
r_sd = if (length(r_sd_name)) suppressWarnings(as.numeric(.data[[r_sd_name[1]]])) else NA_real_
)
# If suhi missing but we have means, derive it
if (!"suhi" %in% names(df) && all(c("urban_mean","rural_mean") %in% names(df))) {
df <- df %>% mutate(suhi = suppressWarnings(as.numeric(urban_mean)) -
suppressWarnings(as.numeric(rural_mean)))
}
# ---- Aggregate duplicates per (city, year) ----
df_agg <- df %>%
group_by(city, year) %>%
summarise(
suhi = mean(suhi, na.rm = TRUE),
u_sd = sqrt(mean(u_sd^2, na.rm = TRUE)),   # RMS combine if dup rows
r_sd = sqrt(mean(r_sd^2, na.rm = TRUE)),
.groups = "drop"
)
# ---- Compute SUHI SD and Relative Error (%) ----
re_long <- df_agg %>%
mutate(suhi_sd = sqrt(u_sd^2 + r_sd^2),
re_pct  = ifelse(abs(suhi) < 1e-9 | is.na(suhi_sd),
NA_real_,
(suhi_sd / abs(suhi)) * 100)) %>%
filter(year %in% years_for_re) %>%
mutate(year_f = factor(year, levels = years_for_re,
labels = paste("Relative Error", years_for_re, "(%)"))) %>%
# Color categories like your chart
mutate(level = case_when(
re_pct <= 10 ~ "≤10% (Low)",
re_pct <= 30 ~ "10–30% (Medium)",
re_pct >  30 ~ ">30% (High)",
TRUE         ~ NA_character_
))
# Drop rows with NA re_pct
re_long <- re_long %>% filter(!is.na(re_pct))
# ---- Order cities by latest year's RE (second element in years_for_re) ----
order_ref <- re_long %>%
filter(year == years_for_re[2]) %>%
arrange(re_pct) %>%
pull(city)
re_long <- re_long %>%
mutate(city_f = factor(city, levels = order_ref))
# ---- Plot ----
pos <- position_dodge(width = 0.8)
# Fill by category (green/orange/red) + outline color to distinguish 2017 vs 2024 in the legend
fill_cols  <- c("≤10% (Low)" = "#2ECC71", "10–30% (Medium)" = "#F39C12", ">30% (High)" = "#E74C3C")
line_cols  <- setNames(c("#F39C12", "#F1C40F"), levels(re_long$year_f))  # 2017/2024 legend
p_re <- ggplot(re_long, aes(x = city_f, y = re_pct,
fill = level, color = year_f)) +
geom_col(width = 0.7, position = pos, linewidth = 0.3) +
geom_text(aes(label = sprintf("%.1f%%", re_pct)),
position = position_dodge(width = 0.8),
vjust = -0.2, size = 3.3) +
geom_hline(yintercept = 10, linetype = "dashed", color = "grey40") +
geom_hline(yintercept = 30, linetype = "dashed", color = "grey40") +
annotate("text", x = Inf, y = 10, label = "10% (Low Error)",
hjust = 1.02, vjust = -0.3, size = 3.2, color = "grey30") +
annotate("text", x = Inf, y = 30, label = "30% (Medium Error)",
hjust = 1.02, vjust = -0.3, size = 3.2, color = "grey30") +
scale_fill_manual(values = fill_cols, na.translate = FALSE, name = NULL) +
scale_color_manual(values = line_cols, name = NULL,
guide = guide_legend(override.aes = list(fill = c("#F39C12","#F1C40F")))) +
scale_y_continuous(labels = label_percent(accuracy = 1, scale = 1),  # keep % scale
expand = expansion(mult = c(0.02, 0.15))) +
labs(
title = sprintf("Relative Error Analysis: %d vs %d", years_for_re[1], years_for_re[2]),
subtitle = "Color coding: Green ≤10% | Orange 10–30% | Red >30%",
x = "Cities",
y = "Relative Error (%)"
) +
theme_minimal(base_size = 12) +
theme(
axis.text.x = element_text(angle = 30, hjust = 1),
legend.position = "top",
panel.grid.minor = element_blank()
)
if (!dir.exists("plots")) dir.create("plots")
ggsave("plots/04_relative_error_dashboard.png", p_re, width = 11, height = 6.5, dpi = 300)
message("Saved: ", normalizePath("plots/04_relative_error_dashboard.png"))
# ==============================
# Relative Error Analysis: <year1> vs <year2> (warning-proof)
# ==============================
library(dplyr)
library(tidyr)
library(ggplot2)
library(forcats)
library(stringr)
library(scales)
years_for_re <- c(2017, 2024)  # change if needed
# --- Clean names & pick SD cols (supports several variants) ---
clean_city <- function(x) x |> as.character() |>
str_replace_all("\\u00A0", " ") |> str_squish() |> str_trim()
df_clean <- df %>%
mutate(city = clean_city(city), year = as.integer(year))
u_sd_name <- intersect(c("urban_std","urban_stdc","urban_sd"), names(df_clean))
r_sd_name <- intersect(c("rural_std","rural_stdc","rural_sd"), names(df_clean))
df_clean <- df_clean %>%
mutate(
u_sd = if (length(u_sd_name)) suppressWarnings(as.numeric(.data[[u_sd_name[1]]])) else NA_real_,
r_sd = if (length(r_sd_name)) suppressWarnings(as.numeric(.data[[r_sd_name[1]]])) else NA_real_
)
# If SUHI missing, derive it
if (!"suhi" %in% names(df_clean) && all(c("urban_mean","rural_mean") %in% names(df_clean))) {
df_clean <- df_clean %>%
mutate(suhi = suppressWarnings(as.numeric(urban_mean)) -
suppressWarnings(as.numeric(rural_mean)))
}
# --- Aggregate duplicates per (city, year) ---
df_agg <- df_clean %>%
group_by(city, year) %>%
summarise(
suhi = mean(suhi, na.rm = TRUE),
u_sd = sqrt(mean(u_sd^2, na.rm = TRUE)),
r_sd = sqrt(mean(r_sd^2, na.rm = TRUE)),
.groups = "drop"
)
# --- Relative error (%): sigma_suhi / |mu_suhi| * 100 ---
re_long <- df_agg %>%
filter(year %in% years_for_re) %>%
mutate(
suhi_sd = sqrt(u_sd^2 + r_sd^2),
re_pct  = ifelse(abs(suhi) < 1e-9 | is.na(suhi_sd), NA_real_, (suhi_sd / abs(suhi)) * 100),
year_f  = factor(year, levels = years_for_re,
labels = paste0("Relative Error ", years_for_re, " (%)"))
) %>%
filter(!is.na(re_pct))
# Category text kept ASCII to avoid Unicode mismatches
re_long <- re_long %>%
mutate(level_code = case_when(
re_pct <= 10 ~ "low", re_pct <= 30 ~ "med", re_pct > 30 ~ "high"),
level = factor(level_code,
levels = c("low","med","high"),
labels = c("<=10% (Low)", "10-30% (Medium)", ">30% (High)")))
# Order cities by the second (comparison) year
order_ref <- re_long %>%
filter(year == years_for_re[2]) %>%
arrange(re_pct) %>% pull(city)
re_long <- re_long %>% mutate(city_f = factor(city, levels = order_ref))
# --- Build scale mappings from the data's actual levels (prevents warnings) ---
fill_cols <- setNames(c("#2ECC71","#F39C12","#E74C3C")[seq_along(levels(re_long$level))],
levels(re_long$level))
line_cols <- setNames(c("#4E79A7","#E15759")[seq_along(levels(re_long$year_f))],
levels(re_long$year_f))
pos <- position_dodge(width = 0.75)
p_re <- ggplot(re_long, aes(x = city_f, y = re_pct, fill = level, color = year_f)) +
geom_col(width = 0.65, position = pos, linewidth = 0.3) +
geom_text(aes(label = sprintf("%.1f%%", re_pct)),
position = pos, vjust = -0.25, size = 3.1) +
geom_hline(yintercept = 10, linetype = "dashed", color = "grey40") +
geom_hline(yintercept = 30, linetype = "dashed", color = "grey40") +
annotate("text", x = Inf, y = 10, label = "10% (Low Error)",
hjust = 1.02, vjust = -0.3, size = 3, color = "grey35") +
annotate("text", x = Inf, y = 30, label = "30% (Medium Error)",
hjust = 1.02, vjust = -0.3, size = 3, color = "grey35") +
scale_fill_manual(values = fill_cols, drop = FALSE, name = NULL) +
scale_color_manual(values = line_cols, drop = FALSE, name = NULL) +
scale_y_continuous(labels = function(x) paste0(x, "%"),
expand = expansion(mult = c(0.05, 0.18))) +
labs(
title = sprintf("Relative Error Analysis: %d vs %d", years_for_re[1], years_for_re[2]),
subtitle = "Color coding: Green ≤10% | Orange 10–30% | Red >30%",
x = "Cities", y = "Relative Error (%)"
) +
theme_minimal(base_size = 12) +
theme(
axis.text.x = element_text(angle = 30, hjust = 1),
legend.position = "top",
panel.grid.minor = element_blank()
)
if (!dir.exists("plots")) dir.create("plots")
ggsave("plots/04_relative_error_dashboard.png", p_re, width = 11, height = 6.5, dpi = 300)
message("Saved: ", normalizePath("plots/04_relative_error_dashboard.png"))
